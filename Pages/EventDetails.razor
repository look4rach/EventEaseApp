@page "/event/{Id:int}"
@using EventEaseApp
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IStateManager StateManager
@implements IDisposable 
<PageTitle>Event Details - EventEase</PageTitle>

<div class="container mt-4">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-warning" role="alert">
            @errorMessage
            <div class="mt-3">
                <button class="btn btn-primary" @onclick="NavigateBack">Back to Events</button>
            </div>
        </div>
    }
    else if (currentEvent != null)
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <h3 class="card-title mb-0">@currentEvent.Name</h3>
                            @if (currentEvent.CreatorId == StateManager.CurrentSession.Email)
                            {
                                <span class="badge bg-primary">Created by you</span>
                            }
                        </div>
                        <div class="card-text">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <p class="mb-2">
                                        <i class="oi oi-calendar-check me-2"></i>
                                        <strong>Date:</strong> @currentEvent.Date.ToString("MMM dd, yyyy h:mm tt")
                                    </p>
                                    <p class="mb-2">
                                        <i class="oi oi-map-marker me-2"></i>
                                        <strong>Location:</strong> @currentEvent.Location
                                    </p>
                                </div>
                                <div class="col-md-6">
                                    <p class="mb-2">
                                        <i class="oi oi-people me-2"></i>
                                        <strong>Attendees:</strong> @currentEvent.RegisteredCount
                                        @if (currentEvent.MaxAttendees > 0)
                                        {
                                            <span>/ @currentEvent.MaxAttendees</span>
                                        }
                                    </p>
                                    <p class="mb-2">
                                        <i class="oi oi-badge me-2"></i>
                                        <strong>Status:</strong>
                                        @if (currentEvent.MaxAttendees == 0)
                                        {
                                            <span class="text-success">Open (Unlimited spots)</span>
                                        }
                                        else if (currentEvent.HasAvailableSpots)
                                        {
                                            <span class="text-success">Open (@(currentEvent.MaxAttendees - currentEvent.RegisteredCount) spots left)</span>
                                        }
                                        else
                                        {
                                            <span class="text-danger">Full</span>
                                        }
                                    </p>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(currentEvent.Description))
                            {
                                <div class="mb-3">
                                    <h5><i class="oi oi-document me-2"></i>Description</h5>
                                    <div class="card bg-light">
                                        <div class="card-body">
                                            @currentEvent.Description
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="mt-4">
                            <button class="btn btn-primary" @onclick="NavigateBack">Back to Event List</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <AttendanceTracker
                    Event="currentEvent"
                    OnEventUpdated="HandleEventUpdated" />
            </div>
        </div>
    }
    else
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Event? currentEvent;
    private string errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var events = await EventService.GetEventsAsync();
            currentEvent = events.FirstOrDefault(e => e.Id == Id);
            if (currentEvent == null)
            {
                errorMessage = $"Event with ID {Id} was not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading event details.";
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("events");
    }

    private async Task HandleEventUpdated(Event updatedEvent)
    {
        currentEvent = updatedEvent;
        await EventService.UpdateEventAsync(updatedEvent);
    }
    protected override async Task OnInitializedAsync()
    {
        StateManager.OnSessionChanged += HandleSessionChanged;
        await RefreshEventDetails();
    }

    private async void HandleSessionChanged()
    {
        await InvokeAsync(async () =>
        {
            await RefreshEventDetails();
            StateHasChanged();
        });
    }

    private async Task RefreshEventDetails()
    {
        try
        {
            var events = await EventService.GetEventsAsync();
            currentEvent = events.FirstOrDefault(e => e.Id == Id);
            if (currentEvent == null)
            {
                errorMessage = $"Event with ID {Id} was not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading event details.";
        }
    }
    public void Dispose()
    {
        StateManager.OnSessionChanged -= HandleSessionChanged;
    }
}
