@namespace EventEaseApp
@using EventEaseApp
@inject IStateManager StateManager
@implements IDisposable

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Attendance Tracker</h5>
    </div>
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                @if (Event.MaxAttendees > 0)
                {
                    <span class="text-muted">Spots Available: @(Event.MaxAttendees - Event.RegisteredCount) / @Event.MaxAttendees</span>
                }
                else
                {
                    <span class="text-muted">Unlimited Spots Available</span>
                }
            </div>
            <div>
                <span class="badge bg-primary me-2">@Event.RegisteredCount Registered</span>
                <span class="badge bg-success">@Event.AttendedCount Attended</span>
            </div>
        </div>

        @if (StateManager.IsAuthenticated())
        {
            if (!Event.IsUserRegistered(StateManager.CurrentSession.UserId))
            {
                @if (Event.HasAvailableSpots)
                {
                    <button class="btn btn-primary" @onclick="RegisterForEvent">Register for Event</button>
                }
                else
                {
                    <div class="alert alert-warning">
                        This event is full. No more spots available.
                    </div>
                }
            }
            else
            {
                var attendance = Event.Attendees.First(a => a.UserId == StateManager.CurrentSession.UserId);
                <div class="alert alert-info">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>You are registered for this event</span>
                        <div>
                            @if (attendance.Status == AttendanceStatus.Registered)
                            {
                                <button class="btn btn-outline-danger btn-sm" @onclick="CancelRegistration">
                                    Cancel Registration
                                </button>
                            }
                            else
                            {
                                <span class="badge bg-@GetStatusBadgeColor(attendance.Status)">
                                    @attendance.Status
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="alert alert-info">
                Please <a href="/register">register</a> to participate in this event.
            </div>
        }

        @if (ShowAttendeeList && Event.Attendees.Any())
        {
            <div class="mt-3">
                <h6>Attendees</h6>
                <div class="list-group">
                    @foreach (var attendee in Event.Attendees.OrderBy(a => a.RegisteredAt))
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@attendee.UserName</span>
                            <span class="badge bg-@GetStatusBadgeColor(attendee.Status)">
                                @attendee.Status
                            </span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Event Event { get; set; } = null!;

    [Parameter]
    public bool ShowAttendeeList { get; set; } = true;

    [Parameter]
    public EventCallback<Event> OnEventUpdated { get; set; }

    private async Task RegisterForEvent()
    {
        try
        {
            Event.RegisterAttendee(
                StateManager.CurrentSession.UserId,
                StateManager.CurrentSession.Email
            );
            await OnEventUpdated.InvokeAsync(Event);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error registering for event: {ex.Message}");
            // Consider adding a user-visible error message display
        }
    }

    private async Task CancelRegistration()
    {
        try
        {
            Event.CancelAttendance(StateManager.CurrentSession.UserId);
            await OnEventUpdated.InvokeAsync(Event);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error registering for event: {ex.Message}");
        }
    }

    private string GetStatusBadgeColor(AttendanceStatus status) => status switch
    {
        AttendanceStatus.Registered => "primary", 
        AttendanceStatus.Attended => "success", 
        AttendanceStatus.Cancelled => "danger", 
        AttendanceStatus.NoShow => "warning", 
        _ => "secondary"
    };
    protected override void OnInitialized()
    {
        StateManager.OnSessionChanged += HandleSessionChanged;
    }

    private async void HandleSessionChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        StateManager.OnSessionChanged -= HandleSessionChanged;
    }
}
